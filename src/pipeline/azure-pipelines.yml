trigger:
- main

variables:
  vmImageName: 'ubuntu-latest'

  Path_Tests: './src/BenchmarkingDapperEFCoreCRMSqlServer'
  Path_ArtifactsBenchmarking: '/src/BenchmarkingDapperEFCoreCRMSqlServer/BenchmarkDotNet.Artifacts/results'
  ArtifactBenchmarkingHtml: 'BenchmarkingDapperEFCoreCRMSqlServer.Tests.CRMTests-report.html'
  ArtifactBenchmarkingMarkdown: 'BenchmarkingDapperEFCoreCRMSqlServer.Tests.CRMTests-report-github.md'
  NoContatosPorCompanhia: '2'

stages:
- stage: Tests
  displayName: Tests stage
  variables:
    - group: benchmarkdotnet
  jobs:
  - job: Tests
    displayName: Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        echo '*** SDKs do .NET intalados ***'
        dotnet --list-sdks
        echo '*** Versão assumida como default para o .NET ***'
        dotnet --version
      displayName: Exibir versoes instaladas do .NET SDK
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.0.300'
      displayName: Configurar o uso do .NET 9.0.300
    - script: |
        echo '*** SDKs do .NET intalados ***'
        dotnet --list-sdks
        echo '*** Versão assumida como default para o .NET ***'
        dotnet --version
      displayName: Exibir versoes instaladas do .NET SDK (parte 2)
    - script: |
        echo 'No. de Contatos a serem criados para cada registro de Empresa/Companhia:'
        echo ''
        echo $(NoContatosPorCompanhia)
        echo ''
      displayName: Exibir configuracao com o numero de Contatos a serem criados por Empresa/Companhia
    - script: |
        cd $(Path_Tests)
        echo '*** Arquivos no diretorio do projeto ***'
        pwd
        echo ''
        ls
        echo ''
        echo 'Iniciando a execucao dos testes...'
        echo ''
        dotnet run --filter BenchmarkingDapperEFCoreCRMSqlServer.Tests.* -c Release
      displayName: Executar benchmarking com testes de performance comparando alternativas
      env:
        NumeroContatosPorCompanhia: $(NoContatosPorCompanhia)
    - script: |
        sleep 20s
        docker ps -a
      displayName: Exibir containers apos 20 segundos
    - script: |
        cd $(Build.SourcesDirectory)/$(Path_ArtifactsBenchmarking)
        pwd
        ls
      displayName: Exibir arquivos gerados como resultado dos testes
    - task: PublishHtmlReport@1
      inputs:
        reportDir: '$(Build.SourcesDirectory)/$(Path_ArtifactsBenchmarking)/$(ArtifactBenchmarkingHtml)'
      displayName: Publicar resultado no formato HTML
    - task: PublishMarkdownReports@1
      inputs:
        contentPath: '$(Build.SourcesDirectory)/$(Path_ArtifactsBenchmarking)'
        indexFile: '$(ArtifactBenchmarkingMarkdown)'
      displayName: Publicar resultado no formato Markdown